  <div class="details__content row">
    <div class="col-lg-2 col-md-0"></div>
    <div class="col-lg-4 col-md-12">
      <h2 class="details__heading">
        <span class="details__heading--building">Building</span>{~s}
        <span class="details__heading--modern">the modern</span>{~s}
        <span class="details__heading--client">web client</span>
      </h2>
    </div>
    <div class="col-lg-4 col-md-12 details__body">
      <h3 class="details__model-heading">Steps Forward.</h3>
      <p>
        With ever growing  browser support for html5 standards and the advent of the modern JavaScript ecosystem, it now possible to build web applications that can operate as more than just a facade for a server side application. The modern web client brings its own independent application architecture to the table allowing for enforcement of business logic, input validation, preferences, and user flows without constantly deferring to a server application that sits on the other side of a Internet connection that may be inconsistent, slow or unstable.  A new level of responsive user experience that is much closer in feel to a native application is now possible while retaining the open, cross platform advantages of a web application. This change in paradigm from a server centric model to one where the client has a larger role has transformed the basic nature of the Font - End / UI Developer role and disrupted the division of responsibilities within the development team.
      </p>
    </div>
      <div class="col-lg-2 col-md-0"></div>
    </div>
    <div class="details__content row">
      <div class="col-lg-2  col-md-0"></div>
      <div class="col-lg-8 col-md-12 details__body">
       <figure>
          <div>
            {>"app/dust/svg/ui-role" /}
          </div>
          <figcaption>
          The role of the UI Developer within the continuum from humanistic concerns to technological concerns. With credit and much thanks given to <a href="https://asinthecity.com/2011/11/10/the-difference-between-a-ux-designer-and-ui-developer/" target="_BLANK"> this blog article.</a>
          </figcaption>
      </figure>
      <p>
          The UI Developer role sits in an unique position on the development team.  In a sense, the UI Developer must be the bridge between two very different worlds and ways of thinking. On the one side are the user focused, “soft” (in a sense of be less definable by nature) concerns of UX: usability, interaction design and visual impact. And on the other, the technological focused, “hard” concerns of the application developer: api efficiency, security, versioning, separation of concerns, and performance.  A good UI Developer must at least have an “eye” for design and what looks good, a sense of when a user experience is or is not working on the one hand, but also have strong codings skills, an ability to troubleshoot and debug across environments, and manage a build infrastructure on the other.  And on top of this the UI Developer often ends up being one of the primary advocates and implementors of accessibility on the team.  So it requires a developer who is as comfortable in Photoshop or Illustrator as they are in writing JavaScript, editing Less, or logging  into a Linux server and modifying an Apache configuration file in VI. A good UI Developer needs to embrace these various aspects with a strong curiosity about how things work, how they can be improved and most importantly posses a fearlessness to jump in and work with technologies that may be foreign to them.  They need to be, at the very least, aware of nearly every aspect of the web page, and whenever possible, understand the technical considerations that underly and define those aspects.
        </p>
        <p>
          Unfortunately, despite of what I have just said, the UI developer is often in a position of justifying their position and value — especially in an enterprise environment.  While server side technologies are very mature at this point and their role is more or less well defined and their value is obviously paramount, front end technologies, despite — or perhaps because of — going through a period of rapid growth and development for years now, present a value proposition that is less clear. It is understandable that management is unsure on the role and a capabilities of this new technology and how it fits into the their current stack. Stability, reliability, and a proven track record are justifiable reason to stick with what has worked up to now.  However, the web in general and more importantly user exceptions of how the web should work and behave require a more progressive approach.  We have the tools, technologies and the opportunity to develop this new web client that is growing in robustness and continuing to deliver  better, more responsive experiences to the user.  But to deliver on this potential I believe the UI must be treated with the same seriousness and dedication that is given to sever centered applications currently.  Operating with the old model were the server is the center of all concerns is going to become less and less feasible as the general shift towards a “thicker” client continues.  The client is becoming one of the primary pillars of the next generation of web based applications, no more or less important than any other pillar.
      </p>
    </div>
    <div class="col-lg-2  col-md-0"></div>
  </div>
  <div class="details__content row">
    <div class="col-lg-2  col-md-0 col-xs-0"></div>
    <div class="col-lg-8 col-md-12 details__body">
      <h3 class="details__model-heading">Getting Serious</h3>
      <p>
        To be clear. This is not a concept but something that is already well underway. There are many companies and dev teams that are already implementing robust client side applications. All of the Browser vendors are relentlessly pushing browser technology forward at a pace never before seen providing the essential foundations for the client of the future. Service workers, local storage, web sockets, server sent events, flex-box and now even web assembly — to name just a few (see <a href="http://www.evolutionoftheweb.com" target="_BLANK">this</a> for a visual representation that is quite fun.) As always with the web, just keeping up and not being totally left behind is the real task. And right now is the age of the client. That is why it is time to get serious about UI development and to give it the attention it needs.  UI development needs proper code review, real oversight, security auditing, performance testing and true care when it comes to architectural decisions. If we can do that I think the opportunities for advancing the web experience are tremendous.
      </p>
      </div>
      <div class="col-lg-2  col-md-0 col-xs-0"></div>
  </div>
  <hr class="details__rule">
  <div class="details__content row">
    <div class="col-lg-2  col-md-0 col-xs-0"></div>
    <div class="col-lg-8 col-md-12 details__body">
      <h3 class="details__model-heading">In Depth: The Client Application Stack</h3>
        <div class="details__col">
          <p>
            How does this new, more robust UI layer fit into the greater web application technology stack? The following is one concept of how it might work.  There are so many technologies involved that creating a visualization can easily get unwieldy and become pretty useless. I have done my best to simplify a generic concept of a basic architecture were the UI layer is more independent of the server. Take it for what it is, a concept, not a blueprint.
          </p>
          <figure>
            <div>
              {>"app/dust/svg/ui-model" /}
            </div>
          </figure>
          <p>
            The server is still responsible for initiating the application in response to the initial client request by sending the base html page to the browser, as it must. The page may contain a basic mount point (container) for the front end application or there may be a need for an initial server side rendering for SEO reasons. There is a strong argument to be made for doing an initial render server side, or doing the app layout rendering in a middle-ware layer running node.js server. It allows the page to display initial content before the JavaScript application has been downloaded and initialized. This can give the perception to the user that the app has loaded faster. It is also likely the server would be embedding initial bootstrap data for the application to avoid any immediate additional data requests &mdash; also a nice optimization. Ideally, at this point, the server (or middle-ware) is done producing html. Additional domain interactions would be in the form of api requests using whatever standard is appropriate: REST, SOAP, GraphQL &mdash; whatever the overriding architecture demands.  In the case of an authenticated application, these domain services would also still maintain the session by checking request headers and responding as appropriate when a session expires.
          </p>
          <p>
            Once an application has been bootstrapped onto the page it can then use its own internal data store to maintain its state and respond to user interactions, internal events, or subscribed stream events (in the case of the <a href="https://github.com/Reactive-Extensions/RxJS" target="_BLANK">reactive model</a> -- something I am very excited to learn more about).  The diagram illustrates a data flow that is essentially the <a href="https://facebook.github.io/flux/" target="_BLANK">Flux</a> pattern were data flows in a single direction. An application event (or <a href="http://redux.js.org/docs/basics/Actions.html" target="_BLANK">Action</a> ) causes a change in application state which in turn causes the application to re-render its display. Data flows down to the store through event handlers and the state is manipulated there (or a new state is produced if the state is immutable).  The store responsible for transforming the state and passing it back to the view engine.
          </p>
          <p>
            Bellow the state layer I have placed the somewhat generic concept of the model. The model is a placeholder for the connection layer that handles making the api requests, or subscribes to event streams using  XMLHttpRequest, Fetch or even WebSockets.  It also needs to provide an interface to the store for dealing with asynchronous behavior using something like events, promises, callbacks, generators (<a href="https://github.com/redux-saga/redux-saga" target="_BLANK">sagas</a>), or observables. This is where the connection to the back-end or other services is handled. Additionally the model could provide additional functions related to the data such as hydration of a data set, aggregation of multiple requests, or transformation from a service schema to something more easily digest-able by the store. Every layer above the model is unaware of any specifics regarding details of communication protocols, only the interface provided by the model — making swapping the model code out with a different implementation without affecting the code in layer above theoretically possible.
          </p>
          <p>
            Because of the possibility for data transformation at the model level I have also marked the model as a layer that could be hosted on a node.js middle-ware server. Most of the discussion these day about server hosted JavaScript middle-layers center around doing an initial render on the server as I mentioned above.  Even if pre-rendering is the use-case with the most obvious benefits I believe the middle-layer can have a place in the service connection. It is essentially a layer between the client and the application server for api communication. It is certainly a more complex process than a direct service call from the client and there would be concerns in terms of network latency, scaling and timeouts. But under the right circumstances it does have the potential benefits of offloading some of the data processing  to a more predictable environment and optimizing the transfer payload between the middle-layer and client.  Not all users have the benefit of a fast device on a fast network, so having the capability to optimize for slower clients without touching the primary (potentially legacy) service api could be very valuable.
          </p>
          <p>
            So in summary the server bootstraps the application and maintains the session (were appropriate) and passes primary control over to the client which enforces validations, business logic, and UI state. The client leverages such technologies as client side routing, local storage, fetch and web sockets to keep communications with the server (or other web apis) as streamlined and efficient as possible to insulate the user from the negative effects if network latency, server load and overall poor connectivity.
          </p>
        </div>
    </div>
    <div class="col-lg-2  col-md-0 col-xs-0"></div>
  </div>
<div class="details__arrow">
   <a class="arrow fa fa-arrow-down fa-2x bounce" href="#tech">
    <span class="arrow-meta">Next: <strong>Tech Toolbox</strong></span>
   </a>
</div>